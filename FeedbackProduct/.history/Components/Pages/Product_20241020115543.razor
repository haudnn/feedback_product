@page "/products"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<PageTitle>Quản lý sản phẩm</PageTitle>




<section class="columns is-variable is-0">
	<div class="sidebar is_less is_pin has-background-white h-full flex_column"
		style="background-color: white; max-width: 200px; height: 100vh;">
		<div class="nav-scrollable">
			<nav class="scrolly is-mobile w-full p-2">
				<ul>
					<li>
						<a href="admin/products" class="button w-full flex_left  is-black is-inverted has-text-grey">
							<span class="icon has-text-grey">
								<i class="material-icons-outlined has-text-grey">assignment</i>
							</span>
							<span class="has-text-grey">
								Sản phẩm
							</span>
						</a>
					</li>
					<li>
						<a class="button w-full flex_left  is-black is-inverted has-text-grey  ">
							<span class="icon has-text-grey">
								<i class="material-icons-outlined has-text-grey">assignment</i>
							</span>
							<span class="has-text-grey">
								Người dùng
							</span>
						</a>
					</li>
					<li>
						<a href="admin/feedbacks" class="button w-full flex_left is-black is-inverted has-text-grey  ">
							<span class="icon has-text-grey">
								<i class="material-icons-outlined has-text-grey">assignment</i>
							</span>
							<span class="has-text-grey">
								Phản hồi
							</span>
						</a>
					</li>
				</ul>
			</nav>
		</div>
	</div>
	<div class="content column" style="background-color: #fafafa; width: calc(100vw - 200px);"></div>
</section>

<div>

</div>
@code {
	private int currentCount = 0;
	private bool isLoading = false;
	private bool isAdmin = false;
	private string username;
	private string password;

	private int filterStatus = 0;
	private List<ProductModel> products = new();
	private ProductModel product = new ProductModel();
	private bool isActiveDropdown = false;
	private bool isEdit = false;

	protected override async Task OnInitializedAsync()
	{
		if (isAdmin)
			products = await Filter();
	}

	private async Task<List<ProductModel>> Filter()
	{
		var result = await DbProduct.GetList();
		if (filterStatus == 1)
			result.Where(x => x.isActive).ToList();
		else if (filterStatus == 2)
			result.Where(x => !x.isActive).ToList();
		return result;

	}

	private async Task Login()
	{
		if (string.IsNullOrEmpty(username))
			await JSRuntime.InvokeVoidAsync("tagline", false, "Vui lòng nhập tên đăng nhập!");
		else if (string.IsNullOrEmpty(password))
			await JSRuntime.InvokeVoidAsync("tagline", false, "Vui lòng nhập mật khầu!");
		else if (password != "admin" && username != "admin")
			await JSRuntime.InvokeVoidAsync("tagline", false, "Tên đăng nhập hoặc mật khẩu không chính xác");
		else
		{
			isAdmin = true;
			products = await Filter();
			await JSRuntime.InvokeVoidAsync("tagline", true, "Đăng nhập thành công");
		}
	}

	private void ToggleDropdown()
	{
		isActiveDropdown = !isActiveDropdown;
	}

	private void OpenEditOrAdd(ProductModel item)
	{
		isEdit = true;
		if (item == null)
			product = new ProductModel();
		else
			product = item;
	}

	private void ClosePopup()
	{
		isEdit = false;
	}

	private async Task EditItem()
	{
		if (string.IsNullOrEmpty(product.name))
		{
			await JSRuntime.InvokeVoidAsync("tagline", false, "Vui lòng nhập tên sản phẩm");
		}
		else
		{
			if (string.IsNullOrEmpty(product.id))
			{
				product.isActive = true;
				product.image = $"https://avatars.dicebear.com/api/micah/{DateTime.Now.Minute}.svg?background=grey";
				await DbProduct.Create(product);
				await JSRuntime.InvokeVoidAsync("tagline", true, "Thêm mới sản phẩm thành công");
				ClosePopup();
				products = await Filter();
			}
			else
			{
				await DbProduct.Update(product);
				await JSRuntime.InvokeVoidAsync("tagline", true, "Cập nhật sản phẩm thành công");
				ClosePopup();
				products = await Filter();
			}
		}
	}

	private async Task ChangeStatus(ChangeEventArgs e)
	{
		filterStatus = Convert.ToInt32(e.Value);
		products = await Filter();
	}

	private async Task ActiveItem(ProductModel item)
	{
		item.isActive = !item.isActive;
		await DbProduct.Update(item);
		await JSRuntime.InvokeVoidAsync("tagline", true, "Cập nhật trạng thái thành công");
	}

	private async Task DeleteItem(ProductModel item)
	{
		if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Bạn có chắc muốn xóa sản phẩm {item.name} ?"))
			return;

		await DbProduct.Delete(item.id);
		products.Remove(item);
		await JSRuntime.InvokeVoidAsync("tagline", true, "Đã xóa sản phẩm " + item.name);
	}

}
